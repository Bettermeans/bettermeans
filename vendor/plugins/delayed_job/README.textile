h1. Delayed::Job

Delated_job (or DJ) encapsulates the common pattern of asynchronously executing longer tasks in the background. 

It is a direct extraction from Shopify where the job table is responsible for a multitude of core tasks. Amongst those tasks are:

* sending massive newsletters
* image resizing
* http downloads
* updating smart collections
* updating solr, our search server, after product changes
* batch imports 
* spam checks 

h2. Installation

To install as a gem, add the following to @config/environment.rb@:

<pre>
config.gem 'collectiveidea-delayed_job', :lib => 'delayed_job',
  :source => 'http://gems.github.com'
</pre>

Rake tasks are not automatically loaded from gems, so you'll need to add the following to your Rakefile:

<pre>
begin
  require 'delayed/tasks'
rescue LoadError
  STDERR.puts "Run `rake gems:install` to install delayed_job"
end
</pre>

To install as a plugin:

<pre>
script/plugin install git://github.com/collectiveidea/delayed_job.git
</pre>

After delayed_job is installed, run:

<pre>
script/generate delayed_job
rake db:migrate
</pre>

h2. Upgrading to 1.8

If you are upgrading from a previous release, you will need to generate the new @script/delayed_job@:

<pre>
script/generate delayed_job --skip-migration
</pre>

h2. Queuing Jobs

Call @#send_later(method, params)@ on any object and it will be processed in the background.

<pre>
# without delayed_job
Notifier.deliver_signup(@user)

# with delayed_job
Notifier.send_later :deliver_signup, @user
</pre>

If a method should always be run in the background, you can call @#handle_asynchronously@ after the method declaration:

<pre>
class Device
  def deliver
    # long running method
  end
  handle_asynchronously :deliver
end

device = Device.new
device.deliver
</pre>

h2. Running Jobs

@script/delayed_job@ can be used to manage a background process which will start working off jobs.

<pre>
$ RAILS_ENV=production script/delayed_job start
$ RAILS_ENV=production script/delayed_job stop

# Runs two workers in separate processes.
$ RAILS_ENV=production script/delayed_job -n 2 start
$ RAILS_ENV=production script/delayed_job stop
</pre>

Workers can be running on any computer, as long as they have access to the database and their clock is in sync. Keep in mind that each worker will check the database at least every 5 seconds.

You can also invoke @rake jobs:work@ which will start working off jobs. You can cancel the rake task with @CTRL-C@. 

h2. Custom Jobs

Jobs are simple ruby objects with a method called perform. Any object which responds to perform can be stuffed into the jobs table. Job objects are serialized to yaml so that they can later be resurrected by the job runner. 

<pre>
class NewsletterJob < Struct.new(:text, :emails)
  def perform
    emails.each { |e| NewsletterMailer.deliver_text_to_email(text, e) }
  end    
end  
  
Delayed::Job.enqueue NewsletterJob.new('lorem ipsum...', Customers.find(:all).collect(&:email))
</pre>

h2. Gory Details

The library evolves around a delayed_jobs table which looks as follows: 

  create_table :delayed_jobs, :force => true do |table|
    table.integer  :priority, :default => 0      # Allows some jobs to jump to the front of the queue
    table.integer  :attempts, :default => 0      # Provides for retries, but still fail eventually.
    table.text     :handler                      # YAML-encoded string of the object that will do work
    table.text   :last_error                   # reason for last failure (See Note below)
    table.datetime :run_at                       # When to run. Could be Time.zone.now for immediately, or sometime in the future.
    table.datetime :locked_at                    # Set when a client is working on this object
    table.datetime :failed_at                    # Set when all retries have failed (actually, by default, the record is deleted instead)
    table.string   :locked_by                    # Who is working on this object (if locked)
    table.timestamps
  end

On failure, the job is scheduled again in 5 seconds + N ** 4, where N is the number of retries.

The default Worker.max_attempts is 25. After this, the job either deleted (default), or left in the database with "failed_at" set.
With the default of 25 attempts, the last retry will be 20 days later, with the last interval being almost 100 hours.

The default Worker.max_run_time is 4.hours. If your job takes longer than that, another computer could pick it up. It's up to you to
make sure your job doesn't exceed this time. You should set this to the longest time you think the job could take.

By default, it will delete failed jobs (and it always deletes successful jobs). If you want to keep failed jobs, set
Delayed::Worker.destroy_failed_jobs = false. The failed jobs will be marked with non-null failed_at.

Here is an example of changing job parameters in Rails:

<pre>
# config/initializers/delayed_job_config.rb
Delayed::Worker.destroy_failed_jobs = false
Delayed::Worker.sleep_delay = 60
Delayed::Worker.max_attempts = 3
Delayed::Worker.max_run_time = 5.minutes
</pre>

h3. Cleaning up

You can invoke @rake jobs:clear@ to delete all jobs in the queue.

h2. Mailing List

Join us on the mailing list at http://groups.google.com/group/delayed_job

h2. How to contribute

If you find what looks like a bug:

# Check the GitHub issue tracker to see if anyone else has had the same issue.
   http://github.com/collectiveidea/delayed_job/issues/
# If you don't see anything, create an issue with information on how to reproduce it.

If you want to contribute an enhancement or a fix:

# Fork the project on github.
   http://github.com/collectiveidea/delayed_job/
# Make your changes with tests.
# Commit the changes without making changes to the Rakefile, VERSION, or any other files that aren't related to your enhancement or fix
# Send a pull request.

h3. Changes

* 1.7.0: Added failed_at column which can optionally be set after a certain amount of failed job attempts. By default failed job attempts are destroyed after about a month. 

* 1.6.0: Renamed locked_until to locked_at. We now store when we start a given job instead of how long it will be locked by the worker. This allows us to get a reading on how long a job took to execute.                    

* 1.5.0: Job runners can now be run in parallel. Two new database columns are needed: locked_until and locked_by. This allows us to use   pessimistic locking instead of relying on row level locks. This enables us to run as many worker processes as we need to speed up queue processing.

* 1.2.0: Added #send_later to Object for simpler job creation

* 1.0.0: Initial release
